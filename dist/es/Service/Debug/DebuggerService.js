import * as store from "store2";
import TonicService from "../TonicService";
export class DebuggerService extends TonicService {
    constructor() {
        super();
        this.detect();
    }
    get status() {
        return this.enabled || false;
    }
    set status(status) {
        const $root = window.document.documentElement;
        this.enabled = Boolean(status);
        $root.classList[this.enabled ? "add" : "remove"]("debug-mode");
        store.set("debug", this.enabled);
    }
    detect() {
        const match = window.location.href.match(/debug=(\d|true|false)/i);
        try {
            this.status = JSON.parse(store.get("debug"));
        }
        catch (e) {
            this.status = false;
        }
        if (match) {
            const status = match[1].toLowerCase();
            this.status = status === "1" || status === "true";
        }
    }
    log(message, typeId = DebuggerService.CORE) {
        if (this.status === false) {
            return;
        }
        const output = [];
        const styles = [];
        const type = DebuggerService.TYPE[typeId];
        output.push(`%c${type.emoji}`);
        styles.push(["margin: 0 10px 0 -1.5em"].join(";"));
        output.push(`%c${message}`);
        styles.push(["font-weight: normal", "text-transform: none"].join(";"));
        console.log(output.join(""), ...styles);
    }
    warn(message, options = DebuggerService.WARNING) {
        this.log(message, options);
    }
    error(message, options = DebuggerService.ERROR) {
        this.log(message, options);
    }
    static get TYPE() {
        return [{
                emoji: "üçè",
            }, {
                emoji: "üé≤",
            }, {
                emoji: "üî•",
            }, {
                emoji: "‚ö†Ô∏è",
            }, {
                emoji: "üëçüèª",
            }];
    }
    static get CORE() { return 0; }
    static get ERROR() { return 2; }
    static get WARNING() { return 3; }
}
//# sourceMappingURL=data:application/json;base64,