import AppService from "../service/AppService";
import NotificationService from "../service/NotificationService";
import Container from "./Container";
export default class AppContainer extends Container {
    get notificationService() {
        return this.get(AppContainer.Key.Notification);
    }
    get debuggerService() {
        return this.get(AppContainer.Key.Debugger);
    }
    createInstance(init) {
        const instance = super.createInstance(init);
        return this.setupServiceInstance(instance);
    }
    setupServiceInstance(instance) {
        if (instance instanceof AppService && !(instance instanceof NotificationService)) {
            this.wireServiceWithDefaultDependencies(instance);
        }
        return instance;
    }
    wireServiceWithDefaultDependencies(instance) {
        this.notificationService.registerListener(instance);
    }
}
AppContainer.Key = {
    Debugger: "service.debug.debugger",
    Notification: "service.core.notification",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwQ29udGFpbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2pzL3NyYy9Db3JlL0FwcENvbnRhaW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFVBQVUsTUFBTSx1QkFBdUIsQ0FBQztBQUUvQyxPQUFPLG1CQUFtQixNQUFNLGdDQUFnQyxDQUFDO0FBQ2pFLE9BQU8sU0FBUyxNQUFNLGFBQWEsQ0FBQztBQUVwQyxNQUFNLENBQUMsT0FBTyxtQkFBNkIsU0FBUSxTQUFTO0lBVXhELElBQVcsbUJBQW1CO1FBQzFCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFzQixZQUFZLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFLRCxJQUFXLGVBQWU7UUFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQWtCLFlBQVksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQVFTLGNBQWMsQ0FBQyxJQUFlO1FBQ3BDLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBS1Msb0JBQW9CLENBQUMsUUFBYTtRQUN4QyxFQUFFLENBQUMsQ0FBQyxRQUFRLFlBQVksVUFBVSxJQUFJLENBQUMsQ0FBQyxRQUFRLFlBQVksbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0UsSUFBSSxDQUFDLGtDQUFrQyxDQUFDLFFBQXNCLENBQUMsQ0FBQztRQUNwRSxDQUFDO1FBQ0QsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUNwQixDQUFDO0lBS1Msa0NBQWtDLENBQUMsUUFBb0I7UUFDN0QsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3hELENBQUM7O0FBN0NzQixnQkFBRyxHQUFHO0lBQ3pCLFFBQVEsRUFBRSx3QkFBd0I7SUFDbEMsWUFBWSxFQUFFLDJCQUEyQjtDQUM1QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFwcFNlcnZpY2UgZnJvbSBcIi4uL3NlcnZpY2UvQXBwU2VydmljZVwiO1xuaW1wb3J0IERlYnVnZ2VyU2VydmljZSBmcm9tIFwiLi4vc2VydmljZS9EZWJ1Zy9EZWJ1Z2dlclNlcnZpY2VcIjtcbmltcG9ydCBOb3RpZmljYXRpb25TZXJ2aWNlIGZyb20gXCIuLi9zZXJ2aWNlL05vdGlmaWNhdGlvblNlcnZpY2VcIjtcbmltcG9ydCBDb250YWluZXIgZnJvbSBcIi4vQ29udGFpbmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIEFwcENvbnRhaW5lciBleHRlbmRzIENvbnRhaW5lciB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBLZXkgPSB7XG4gICAgICAgIERlYnVnZ2VyOiBcInNlcnZpY2UuZGVidWcuZGVidWdnZXJcIixcbiAgICAgICAgTm90aWZpY2F0aW9uOiBcInNlcnZpY2UuY29yZS5ub3RpZmljYXRpb25cIixcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7Tm90aWZpY2F0aW9uU2VydmljZX1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IG5vdGlmaWNhdGlvblNlcnZpY2UoKTogTm90aWZpY2F0aW9uU2VydmljZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldDxOb3RpZmljYXRpb25TZXJ2aWNlPihBcHBDb250YWluZXIuS2V5Lk5vdGlmaWNhdGlvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7RGVidWdnZXJTZXJ2aWNlfVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgZGVidWdnZXJTZXJ2aWNlKCk6IERlYnVnZ2VyU2VydmljZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldDxEZWJ1Z2dlclNlcnZpY2U+KEFwcENvbnRhaW5lci5LZXkuRGVidWdnZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluIHRoZSBhcHAgQ29udGFpbmVyLCB3ZSBkZXRlY3QgXCJzcGVjaWFsXCIgaW5qZWN0ZWQgaW5zdGFuY2VzIGxpa2Uge0BzZWUgQXBwU2VydmljZX0gaW5zdGFuY2VzLCB0aGF0IHdlIHdpcmVcbiAgICAgKiB1cCB3aXRoIHNvbWUgZGVmYXVsdCBkZXBlbmRlbmNpZXMuIEUuZy4sIHRoZSB7QHNlZSBEZWJ1Z2dlcn0gc2VydmljZSB3aWxsIGFsd2F5cyBiZSBhdmFpbGFibGUgaW4gYW5vdGhlciBzZXJ2aWNlLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGNyZWF0ZUluc3RhbmNlKGluaXQ6ICgpID0+IGFueSk6IGFueSB7XG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gc3VwZXIuY3JlYXRlSW5zdGFuY2UoaW5pdCk7XG4gICAgICAgIHJldHVybiB0aGlzLnNldHVwU2VydmljZUluc3RhbmNlKGluc3RhbmNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIG5ldyBpbnN0YW5jZSBpcyBhIHNlcnZpY2UsIGFuZCBpZiB0cnVlIGluamVjdHMgdGhlIGRlZmF1bHQgZGVwZW5kZW5jaWVzLlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBzZXR1cFNlcnZpY2VJbnN0YW5jZShpbnN0YW5jZTogYW55KTogYW55IHtcbiAgICAgICAgaWYgKGluc3RhbmNlIGluc3RhbmNlb2YgQXBwU2VydmljZSAmJiAhKGluc3RhbmNlIGluc3RhbmNlb2YgTm90aWZpY2F0aW9uU2VydmljZSkpIHtcbiAgICAgICAgICAgIHRoaXMud2lyZVNlcnZpY2VXaXRoRGVmYXVsdERlcGVuZGVuY2llcyhpbnN0YW5jZSBhcyBBcHBTZXJ2aWNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5qZWN0IHRoZSBkZWZhdWx0IGRlcGVuZGVuY2llcyBpbnRvIHRoZSBnaXZlbiBzZXJ2aWNlXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHdpcmVTZXJ2aWNlV2l0aERlZmF1bHREZXBlbmRlbmNpZXMoaW5zdGFuY2U6IEFwcFNlcnZpY2UpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5ub3RpZmljYXRpb25TZXJ2aWNlLnJlZ2lzdGVyTGlzdGVuZXIoaW5zdGFuY2UpO1xuICAgIH1cbn1cbiJdfQ==