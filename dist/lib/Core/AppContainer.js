"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AppService_1 = require("../service/AppService");
const NotificationService_1 = require("../service/NotificationService");
const Container_1 = require("./Container");
class AppContainer extends Container_1.default {
    get notificationService() {
        return this.get(AppContainer.Key.Notification);
    }
    get debuggerService() {
        return this.get(AppContainer.Key.Debugger);
    }
    createInstance(init) {
        const instance = super.createInstance(init);
        return this.setupServiceInstance(instance);
    }
    setupServiceInstance(instance) {
        if (instance instanceof AppService_1.default && !(instance instanceof NotificationService_1.default)) {
            this.wireServiceWithDefaultDependencies(instance);
        }
        return instance;
    }
    wireServiceWithDefaultDependencies(instance) {
        this.notificationService.registerListener(instance);
    }
}
AppContainer.Key = {
    Debugger: "service.debug.debugger",
    Notification: "service.core.notification",
};
exports.default = AppContainer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwQ29udGFpbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2pzL3NyYy9jb3JlL0FwcENvbnRhaW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNEQUErQztBQUUvQyx3RUFBaUU7QUFDakUsMkNBQW9DO0FBRXBDLGtCQUEyQyxTQUFRLG1CQUFTO0lBVXhELElBQVcsbUJBQW1CO1FBQzFCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFzQixZQUFZLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFLRCxJQUFXLGVBQWU7UUFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQWtCLFlBQVksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQVFTLGNBQWMsQ0FBQyxJQUFlO1FBQ3BDLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBS1Msb0JBQW9CLENBQUMsUUFBYTtRQUN4QyxFQUFFLENBQUMsQ0FBQyxRQUFRLFlBQVksb0JBQVUsSUFBSSxDQUFDLENBQUMsUUFBUSxZQUFZLDZCQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9FLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxRQUFzQixDQUFDLENBQUM7UUFDcEUsQ0FBQztRQUNELE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQUtTLGtDQUFrQyxDQUFDLFFBQW9CO1FBQzdELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4RCxDQUFDOztBQTdDc0IsZ0JBQUcsR0FBRztJQUN6QixRQUFRLEVBQUUsd0JBQXdCO0lBQ2xDLFlBQVksRUFBRSwyQkFBMkI7Q0FDNUMsQ0FBQztBQUxOLCtCQWdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBcHBTZXJ2aWNlIGZyb20gXCIuLi9zZXJ2aWNlL0FwcFNlcnZpY2VcIjtcbmltcG9ydCBEZWJ1Z2dlclNlcnZpY2UgZnJvbSBcIi4uL3NlcnZpY2UvRGVidWcvRGVidWdnZXJTZXJ2aWNlXCI7XG5pbXBvcnQgTm90aWZpY2F0aW9uU2VydmljZSBmcm9tIFwiLi4vc2VydmljZS9Ob3RpZmljYXRpb25TZXJ2aWNlXCI7XG5pbXBvcnQgQ29udGFpbmVyIGZyb20gXCIuL0NvbnRhaW5lclwiO1xuXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBBcHBDb250YWluZXIgZXh0ZW5kcyBDb250YWluZXIge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgS2V5ID0ge1xuICAgICAgICBEZWJ1Z2dlcjogXCJzZXJ2aWNlLmRlYnVnLmRlYnVnZ2VyXCIsXG4gICAgICAgIE5vdGlmaWNhdGlvbjogXCJzZXJ2aWNlLmNvcmUubm90aWZpY2F0aW9uXCIsXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge05vdGlmaWNhdGlvblNlcnZpY2V9XG4gICAgICovXG4gICAgcHVibGljIGdldCBub3RpZmljYXRpb25TZXJ2aWNlKCk6IE5vdGlmaWNhdGlvblNlcnZpY2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQ8Tm90aWZpY2F0aW9uU2VydmljZT4oQXBwQ29udGFpbmVyLktleS5Ob3RpZmljYXRpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge0RlYnVnZ2VyU2VydmljZX1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGRlYnVnZ2VyU2VydmljZSgpOiBEZWJ1Z2dlclNlcnZpY2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQ8RGVidWdnZXJTZXJ2aWNlPihBcHBDb250YWluZXIuS2V5LkRlYnVnZ2VyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbiB0aGUgYXBwIENvbnRhaW5lciwgd2UgZGV0ZWN0IFwic3BlY2lhbFwiIGluamVjdGVkIGluc3RhbmNlcyBsaWtlIHtAc2VlIEFwcFNlcnZpY2V9IGluc3RhbmNlcywgdGhhdCB3ZSB3aXJlXG4gICAgICogdXAgd2l0aCBzb21lIGRlZmF1bHQgZGVwZW5kZW5jaWVzLiBFLmcuLCB0aGUge0BzZWUgRGVidWdnZXJ9IHNlcnZpY2Ugd2lsbCBhbHdheXMgYmUgYXZhaWxhYmxlIGluIGFub3RoZXIgc2VydmljZS5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBjcmVhdGVJbnN0YW5jZShpbml0OiAoKSA9PiBhbnkpOiBhbnkge1xuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHN1cGVyLmNyZWF0ZUluc3RhbmNlKGluaXQpO1xuICAgICAgICByZXR1cm4gdGhpcy5zZXR1cFNlcnZpY2VJbnN0YW5jZShpbnN0YW5jZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBuZXcgaW5zdGFuY2UgaXMgYSBzZXJ2aWNlLCBhbmQgaWYgdHJ1ZSBpbmplY3RzIHRoZSBkZWZhdWx0IGRlcGVuZGVuY2llcy5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgc2V0dXBTZXJ2aWNlSW5zdGFuY2UoaW5zdGFuY2U6IGFueSk6IGFueSB7XG4gICAgICAgIGlmIChpbnN0YW5jZSBpbnN0YW5jZW9mIEFwcFNlcnZpY2UgJiYgIShpbnN0YW5jZSBpbnN0YW5jZW9mIE5vdGlmaWNhdGlvblNlcnZpY2UpKSB7XG4gICAgICAgICAgICB0aGlzLndpcmVTZXJ2aWNlV2l0aERlZmF1bHREZXBlbmRlbmNpZXMoaW5zdGFuY2UgYXMgQXBwU2VydmljZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluamVjdCB0aGUgZGVmYXVsdCBkZXBlbmRlbmNpZXMgaW50byB0aGUgZ2l2ZW4gc2VydmljZVxuICAgICAqL1xuICAgIHByb3RlY3RlZCB3aXJlU2VydmljZVdpdGhEZWZhdWx0RGVwZW5kZW5jaWVzKGluc3RhbmNlOiBBcHBTZXJ2aWNlKTogdm9pZCB7XG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uU2VydmljZS5yZWdpc3Rlckxpc3RlbmVyKGluc3RhbmNlKTtcbiAgICB9XG59XG4iXX0=