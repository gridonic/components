define(["require", "exports", "../AppService"], function (require, exports, AppService_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class DebuggerService extends AppService_1.default {
        constructor(enabled) {
            super();
            this._enabled = enabled;
        }
        get enabled() {
            return this._enabled || false;
        }
        set enabled(status) {
            const $root = window.document.documentElement;
            this.enabled = Boolean(status);
            $root.classList[this.enabled ? "add" : "remove"]("debug-mode");
        }
        log(message, typeId = DebuggerService.CORE) {
            if (this.enabled === false) {
                return;
            }
            const output = [];
            const styles = [];
            const type = DebuggerService.TYPE[typeId];
            output.push(`%c${type.emoji}`);
            styles.push(["margin: 0 10px 0 -1.5em"].join(";"));
            output.push(`%c${message}`);
            styles.push(["font-weight: normal", "text-transform: none"].join(";"));
            console.log(output.join(""), ...styles);
        }
        warn(message, options = DebuggerService.WARNING) {
            this.log(message, options);
        }
        error(message, options = DebuggerService.ERROR) {
            this.log(message, options);
        }
        static get TYPE() {
            return [{
                    emoji: "üçè",
                }, {
                    emoji: "üé≤",
                }, {
                    emoji: "üî•",
                }, {
                    emoji: "‚ö†Ô∏è",
                }, {
                    emoji: "üëçüèª",
                }];
        }
        static get CORE() { return 0; }
        static get ERROR() { return 2; }
        static get WARNING() { return 3; }
    }
    exports.default = DebuggerService;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVidWdnZXJTZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2pzL3NyYy9zZXJ2aWNlL0RlYnVnL0RlYnVnZ2VyU2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUFTQSxxQkFBcUMsU0FBUSxvQkFBVTtRQUduRCxZQUFZLE9BQWdCO1lBQ3hCLEtBQUssRUFBRSxDQUFDO1lBRVIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFDNUIsQ0FBQztRQU9ELElBQUksT0FBTztZQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQztRQUNsQyxDQUFDO1FBT0QsSUFBSSxPQUFPLENBQUMsTUFBTTtZQUNkLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDO1lBRTlDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRy9CLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNuRSxDQUFDO1FBUU0sR0FBRyxDQUFDLE9BQWUsRUFBRSxTQUFpQixlQUFlLENBQUMsSUFBSTtZQUM3RCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ3pCLE1BQU0sQ0FBQztZQUNYLENBQUM7WUFFRCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7WUFDbEIsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1lBR2xCLE1BQU0sSUFBSSxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFHMUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQy9CLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBU25ELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1lBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxxQkFBcUIsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBR3ZFLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBQzVDLENBQUM7UUFRTSxJQUFJLENBQUMsT0FBZSxFQUFFLE9BQU8sR0FBRyxlQUFlLENBQUMsT0FBTztZQUMxRCxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMvQixDQUFDO1FBUU0sS0FBSyxDQUFDLE9BQWUsRUFBRSxPQUFPLEdBQUcsZUFBZSxDQUFDLEtBQUs7WUFDekQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDL0IsQ0FBQztRQUVELE1BQU0sS0FBSyxJQUFJO1lBQ1gsTUFBTSxDQUFDLENBQUM7b0JBQ0osS0FBSyxFQUFFLElBQUk7aUJBQ2QsRUFBRTtvQkFDQyxLQUFLLEVBQUUsSUFBSTtpQkFDZCxFQUFFO29CQUNDLEtBQUssRUFBRSxJQUFJO2lCQUNkLEVBQUU7b0JBQ0MsS0FBSyxFQUFFLElBQUk7aUJBQ2QsRUFBRTtvQkFDQyxLQUFLLEVBQUUsTUFBTTtpQkFDaEIsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztRQUVELE1BQU0sS0FBSyxJQUFJLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFL0IsTUFBTSxLQUFLLEtBQUssS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQyxNQUFNLEtBQUssT0FBTyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBRXJDO0lBMUdELGtDQTBHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBcHBTZXJ2aWNlIGZyb20gXCIuLi9BcHBTZXJ2aWNlXCI7XG5cbi8qKlxuICogVGhlIERlYnVnZ2VyIGNvbXBvbmVudCBpcyBhIHNpbXBsZSBkZWJ1Z2dpbmcgaGVscGVyLiBVc2UgaXQgZm9yIGV4YW1wbGUgdG9cbiAqIGxvZyBtZXNzYWdlcyB0byB0aGUgY2xpZW50IHdoaWNoIHdpbGwgb25seSBiZSBwcmludGVkIHdoZW4gaW4gZGVidWcgbW9kZS5cbiAqXG4gKiBUT0RPOiB0YWtlbiBmcm9tIGVzNiwgdHJhbnNmb3JtIHRvIHB1cmUgdHlwZXNjcmlwdFxuICovXG4vLyB0c2xpbnQ6ZGlzYWJsZVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVidWdnZXJTZXJ2aWNlIGV4dGVuZHMgQXBwU2VydmljZSB7XG4gICAgcHJpdmF0ZSBfZW5hYmxlZDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGVuYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLl9lbmFibGVkID0gZW5hYmxlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgZGVidWdnaW5nIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICovXG4gICAgZ2V0IGVuYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmFibGVkIHx8IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgb3IgZGlzYWJsZXMgZGVidWdnaW5nIG91dHB1dC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RhdHVzXG4gICAgICovXG4gICAgc2V0IGVuYWJsZWQoc3RhdHVzKSB7XG4gICAgICAgIGNvbnN0ICRyb290ID0gd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuICAgICAgICB0aGlzLmVuYWJsZWQgPSBCb29sZWFuKHN0YXR1cyk7XG5cbiAgICAgICAgLy8gRGVsZWdhdGUgc3RhdHVzIHRvIENTUyBhcyB3ZWxsXG4gICAgICAgICRyb290LmNsYXNzTGlzdFt0aGlzLmVuYWJsZWQgPyBcImFkZFwiIDogXCJyZW1vdmVcIl0oXCJkZWJ1Zy1tb2RlXCIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvZ3MgYSBtZXNzYWdlIHRvIHRoZSBjbGllbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBsb2cuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHR5cGVJZFxuICAgICAqL1xuICAgIHB1YmxpYyBsb2cobWVzc2FnZTogc3RyaW5nLCB0eXBlSWQ6IG51bWJlciA9IERlYnVnZ2VyU2VydmljZS5DT1JFKSB7XG4gICAgICAgIGlmICh0aGlzLmVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBvdXRwdXQgPSBbXTtcbiAgICAgICAgY29uc3Qgc3R5bGVzID0gW107XG5cbiAgICAgICAgLy8gUHJpbWl0aXZlIHR5cGUgZ2l2ZW4/IFBpY2sgY29ycmVjdCB0eXBlIG9iamVjdCBmcm9tIHR5cGVzIHRhYmxlXG4gICAgICAgIGNvbnN0IHR5cGUgPSBEZWJ1Z2dlclNlcnZpY2UuVFlQRVt0eXBlSWRdO1xuXG4gICAgICAgIC8vIEVtb2ppXG4gICAgICAgIG91dHB1dC5wdXNoKGAlYyR7dHlwZS5lbW9qaX1gKTtcbiAgICAgICAgc3R5bGVzLnB1c2goW1wibWFyZ2luOiAwIDEwcHggMCAtMS41ZW1cIl0uam9pbihcIjtcIikpO1xuXG4gICAgICAgIC8vIC8vIElmIHRoZXJlIGlzIGEgbGFiZWwgZ2l2ZW4sIGFkZCBpdFxuICAgICAgICAvLyBpZiAob3B0aW9ucy5sYWJlbCkge1xuICAgICAgICAvLyAgICAgb3V0cHV0LnB1c2goYCVjWyR7b3B0aW9ucy5sYWJlbH1dYCk7XG4gICAgICAgIC8vICAgICBzdHlsZXMucHVzaChbXCJtYXJnaW4tcmlnaHQ6IDZweFwiLCBcImZvbnQtd2VpZ2h0OiBib2xkXCIsIFwidGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZVwiXS5qb2luKFwiO1wiKSk7XG4gICAgICAgIC8vIH1cblxuICAgICAgICAvLyBNZXNzYWdlXG4gICAgICAgIG91dHB1dC5wdXNoKGAlYyR7bWVzc2FnZX1gKTtcbiAgICAgICAgc3R5bGVzLnB1c2goW1wiZm9udC13ZWlnaHQ6IG5vcm1hbFwiLCBcInRleHQtdHJhbnNmb3JtOiBub25lXCJdLmpvaW4oXCI7XCIpKTtcblxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgY29uc29sZS5sb2cob3V0cHV0LmpvaW4oXCJcIiksIC4uLnN0eWxlcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9ncyBhIHdhcm5pbmcgdG8gdGhlIGNsaWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGxvZy5cbiAgICAgKiBAcGFyYW0ge29iamVjdHxudW1iZXJ9IG9wdGlvbnMgT3B0aW9uYWwgb3B0aW9ucyBmb3IgY2hhbmdpbmcgdGhlIHdheSBvZiBsb2dnaW5nLlxuICAgICAqL1xuICAgIHB1YmxpYyB3YXJuKG1lc3NhZ2U6IHN0cmluZywgb3B0aW9ucyA9IERlYnVnZ2VyU2VydmljZS5XQVJOSU5HKSB7XG4gICAgICAgIHRoaXMubG9nKG1lc3NhZ2UsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvZ3MgYW4gZXJyb3IgdG8gdGhlIGNsaWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGxvZy5cbiAgICAgKiBAcGFyYW0ge29iamVjdHxudW1iZXJ9IG9wdGlvbnMgT3B0aW9uYWwgb3B0aW9ucyBmb3IgY2hhbmdpbmcgdGhlIHdheSBvZiBsb2dnaW5nLlxuICAgICAqL1xuICAgIHB1YmxpYyBlcnJvcihtZXNzYWdlOiBzdHJpbmcsIG9wdGlvbnMgPSBEZWJ1Z2dlclNlcnZpY2UuRVJST1IpIHtcbiAgICAgICAgdGhpcy5sb2cobWVzc2FnZSwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBUWVBFKCkge1xuICAgICAgICByZXR1cm4gW3tcbiAgICAgICAgICAgIGVtb2ppOiBcIu2gvO29j1wiLFxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBlbW9qaTogXCLtoLztvrJcIixcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgZW1vamk6IFwi7aC97bSlXCIsXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGVtb2ppOiBcIuKaoO+4j1wiLFxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBlbW9qaTogXCLtoL3tsY3toLztv7tcIixcbiAgICAgICAgfV07XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBDT1JFKCkgeyByZXR1cm4gMDsgfVxuICAgIC8vIHN0YXRpYyBnZXQgQ09NUE9ORU5UKCkgeyByZXR1cm4gMTsgfVxuICAgIHN0YXRpYyBnZXQgRVJST1IoKSB7IHJldHVybiAyOyB9XG4gICAgc3RhdGljIGdldCBXQVJOSU5HKCkgeyByZXR1cm4gMzsgfVxuICAgIC8vIHN0YXRpYyBnZXQgU1VDQ0VTUygpIHsgcmV0dXJuIDQ7IH1cbn1cbi8vIHRzbGludDplbmFibGVcbiJdfQ==